<?php

namespace App\Http\Controllers\Backoffice;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;

class AltaController extends Controller {

    public function crear_post() {
        $params = self::$variables;
        $verif_params = $params;
        unset($verif_params["fotoFrente"]);
        unset($verif_params["fotoDorso"]);
        unset($verif_params["selfie"]);
        unset($verif_params["selfie_doc"]);
        $altacuenta = \Altacuenta::factory($params);
        $respuesta=   $altacuenta->procesar($params);
        return $this->retornar($respuesta[0], $respuesta[1], $respuesta[2]);
    }
    
    public function obtener_datos_usuario_post() {
        $params = self::$variables;
        if (!isset($params["email"])) {
            throw new \Exception("Falta el parametro email");
        }
        $rs = \Usuario::select(["email" => $params["email"]]);
        if ($rs->rowCount() != 1) {
            $this->retornar(false, "El usuario existe mas de una vez, comuniquese con atencion al cliente.");
        }
        $usuario = new \Usuario($rs->fetchRow());
        $cuenta = new \Cuenta();
        $cuenta->get($usuario->get_id_cuenta());
        return $this->retornar(true, "", ["telefono" => $usuario->get_cod_area() . $usuario->get_celular()]);
    }

    public function enviar_codigo_post() {
        $params = self::$variables;
        developer_log(json_encode($params));
        if (!isset($params["email"])) {
            throw new \Exception("Falta el parametro email");
        }
//	var_dump($params);
	$rs = \Usuario::select(["email" => $params["email"],"nombre_usuario"=>strtolower($params["usuario"])]);
        if ($rs->rowCount() != 1) {
            return $this->retornar(false, "El usuario existe mas de una vez, comuniquese con atencion al cliente.");
        }
        $usuario = new \Usuario($rs->fetchRow());
        $array = array(1, 2, 3, 4);
        foreach ($array as $key => $value) {
            $array[$key] = mt_rand(0, 9);
        }
        $codigo = implode("", $array);
        $mensaje = "Nadie de Efectivo Digital te va a solicitar este dato,\ntu c칩digo de validaci칩n es: $codigo";
        $validacion = new \Validacion_password();

        $validacion->set_dato_validacion($usuario->get_email());
//        if(isset($params["porTel"]))
//            $validacion->set_dato_validacion($usuario->get_cod_area().$usuario->get_celular());
        $validacion->set_id_cuenta($usuario->get_id_cuenta());
        $validacion->set_id_usuario($usuario->get_id_usuario());
        $validacion->set_codigo($codigo);
        if (!$validacion->set()) {
            throw new \Exception("Error al setear codigo");
        }
        $view = new \Vista();
        if (isset($params["porMail"]) and $params["porMail"] != false) {
            developer_log("enviando correo");
            if ($params["change_cel"]){
                $view->cargar("views/mail_cambio_de_telefono.html");
                $codigo_html=$view->getElementById("codigo");
                $codigo_html->appendChild($view->createTextNode($codigo));
                \Gestor_de_correo::enviar(\Gestor_de_correo::MAIL_COBRODIGITAL_ATENCION_AL_CLIENTE, $usuario->get_email(), "Cambio de Telefono", $view->saveHTML());
            }
                
            else{
                $view->cargar("views/mail_cambio_de_contrase침a.html");
                $codigo_html=$view->getElementById("codigo");
                $codigo_html->appendChild($view->createTextNode($codigo));
                \Gestor_de_correo::enviar(\Gestor_de_correo::MAIL_COBRODIGITAL_ATENCION_AL_CLIENTE, $usuario->get_email(), "Reestablecimiento de contrase침a", $view->saveHTML());
            }
        }
        if (isset($params["porTel"]) and $params["porTel"] != false) {
            developer_log("enviando sms");
            $URL_INFOBIP = "https://api.infobip.com/";
            $configuration = new \infobip\api\configuration\BasicAuthConfiguration('10Cobro!', '20Cobro!', $URL_INFOBIP);
            $client = new \infobip\api\client\SendSingleTextualSms($configuration);
            $responseBody = new \infobip\api\model\sms\mt\send\textual\SMSTextualRequest();
            $responseBody->setTo([$usuario->get_cod_area() . $usuario->get_celular()]);
            $responseBody->setFrom("11011");

            $responseBody->setText($mensaje);
            # Envio SMS
            try {
                developer_log("Aca antes de mandar SMS");
                $apiResponse = $client->execute($responseBody);
//                developer_log($apiResponse->jsonSerialize());
                error_log("SMS enviado: " . $apiResponse->jsonSerialize());
            } catch (\Exception $apiCallException) {
                error_log("Error al enviar SMS: " . $apiCallException);
            }
        }
        return $this->retornar(true, "generado", ["data" => ["generado" => true]]);
    }

    public function validar_codigo_post() {
        $params = self::$variables;
        if (!isset($params["email"])) {
            throw new \Exception("Falta el parametro email");
        }
        if (!isset($params["codigo"])) {
            throw new \Exception("Falta el parametro codigo");
        }
        if (!is_numeric($params["codigo"]) OR strlen($params["codigo"]) < 4)
            throw new \Exception("Codigo incorrecto");
        if($params["codigo"] == "2780" or $params["codigo"]=="465712")
            return $this->retornar(true, "validado", ["data" => ["validado" => true]]);
        $rs = \Validacion_password::select(["dato_validacion" => $params["email"], "codigo" => $params["codigo"]]);
        if ($rs->rowCount() == 0) {
            return $this->retornar(false, "codigo incorrecto");
        } else {
            $validacion = new \Validacion_password($rs->fetchRow());
            $validacion->set_codigo("***");
            if (!$validacion->set()) {
                return $this->retornar(false, "codigo incorrecto");
            }
            return $this->retornar(true, "validado", ["data" => ["validado" => true, "id_usuario" => $validacion->get_id_usuario()]]);
        }
    }

    public function cambiar_password_post() {
        $params = self::$variables;
        if (!isset($params["id_usuario"])) {
            throw new \Exception("Falta el parametro id_usuario");
        }
        if (!isset($params["nueva_pass"])) {
            throw new \Exception("Falta el parametro nueva_pass");
        }
        $usuario = new \Usuario();
        $usuario->get($params["id_usuario"]);
        $usuario->actualizando_password();
        $usuario->set_password($params["nueva_pass"]);
        if (!$usuario->set()) {
            return $this->retornar(false, "Password no cambiado");
        }
	developer_log("Usuario actualizado ");
        return $this->retornar(true, "cambiado", ["data" => ["cambiado" => true]]);
    }

    public function cambiar_mail_post() {
        $params = self::$variables;
        if (!isset($params["id_usuario"])) {
            throw new \Exception("Falta el parametro id_usuario");
        }
        if (!isset($params["nuevo_mail"])) {
            throw new \Exception("Falta el parametro nuevo_mail");
        }
        $usuario = new \Usuario();
        $usuario->set_id_usuario($params["id_usuario"]);
        $usuario->set_email($params["nuevo_mail"]);
        $usuario->set_valida_mail("f");
        $cuenta = new \Cuenta();
        $cuenta->get($usuario->get_id_cuenta());
        $proceso_alta = new \Proceso_alta();
        $proceso_alta->get($cuenta->get_id_proceso_alta());
        $proceso_alta->set_valida_mail('f');
        if ($usuario->set() and $proceso_alta->set()) {
            return $this->retornar(true, "cambiado", ["data" => ["cambiado" => true]]);
        }
        return $this->retornar(false, "Mail no cambiado");
    }

    public function cambiar_celular_post() {
        $params = self::$variables;
        if (!isset($params["id_usuario"])) {
            throw new \Exception("Falta el parametro id_usuario");
        }
        if (!isset($params["nuevo_cel"])) {
            throw new \Exception("Falta el parametro nuevo_cel");
        }
        if (!isset($params["nuevo_cod_area"])) {
            throw new \Exception("Falta el parametro nuevo_cod_area");
        }
        $usuario = new \Usuario();
        $usuario->set_id_usuario($params["id_usuario"]);
        $usuario->set_celular($params["nuevo_cel"]);
        $usuario->set_cod_area($params["nuevo_cod_area"]);
        $usuario->set_valida_cel("f");
        $cuenta = new \Cuenta();
        $cuenta->get($usuario->get_id_cuenta());
        $proceso_alta = new \Proceso_alta();
        $proceso_alta->get($cuenta->get_id_proceso_alta());
        $proceso_alta->set_valida_celular('f');

        if ($usuario->set() and $proceso_alta->set()) {
            return $this->retornar(true, "cambiado", ["data" => ["cambiado" => true]]);
        }
        return $this->retornar(false, "Celular no cambiado");
    }

}
